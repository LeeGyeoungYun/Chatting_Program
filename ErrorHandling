이 페이지는 스프링부트를 공부하면서 발생했던 에러들을 고쳐나가면서 공부한 내용을 적은 공간입니다.

1. org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 
  'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: 
   Unsatisfied dependency expressed through method 'dataSourceScriptDatabaseInitializer' parameter 0; nested exception is org.springframework.beans.factory.
   BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/exam/chatting/config/DatabaseConfig.class]: 
   Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: 
   Factory method 'dataSource' threw exception; nested exception is java.lang.RuntimeException: Driver com.mysql.cj.jdbc.Driver claims to not accept jdbcUrl, url=jdbc:mysql://localhost:3306/chat?serverTimezone=Asia/Seoul&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true
      위와 같은 문제는 스프링 2.5버전 이후부터 SQL DataSource Initialization의 기능이 변경되면서 발생된 문제이다.
      
   spring에서 jpa를 사용 시 @Entity 어노테이션을 사용하면 ddl이 자동으로 생성되고(모드 설정 가능) 초기 데이터 생성을 위해 resource 디렉토리 아래 data.sql 파일을 insert 문을 넣어 사용하곤 한다.
       관련 공식 문서에 따르면 다음과 같다.
   
   <Hibernate and data.sql> 
   By default, data.sql scripts are now run before Hibernate is initialized. This aligns the behavior of basic script-based initialization with that of Flyway and Liquibase. 
   If you want to use data.sql to populate a schema created by Hibernate, set spring.jpa.defer-datasource-initialization to true. 
   While mixing database initialization technologies is not recommended, this will also allow you to use a schema.sql script to build upon a Hibernate-created schema before it’s populated via data.sql.
   
   
      이제 data.sql 스크립트는 hibernate가 초기화되기 전에 실행되며 hibernate에 의해 생성된 스키마에 데이터를 넣기 위해 data.sql을 사용하고 싶으면 spring.jpa.defer-datasource-initialization 이 값을 true로 하라고 되어있다.
   (단, 데이터 데이터 초기화 기술을 섞는 것을 추천하지는 않는다고 되어있다.)
   
       즉, application.properties 에 spring.jpa.defer-datasource-initialization=true 를 추가시켜주면 된다.
       
       아니면 이클립스 상단 메뉴에 Project -> Clean 들어가서 해당 프로젝트를 클린시켜서 실행시키면 됨. 빌드가 꼬여서 실행이 안된걸수도 있음. Clean을 통해
       빌드가 꼬인걸 풀어주는 역할을 함.
   
   
2. 스프링 부트가 어떠한 에러도 없이 실행이 안되었을 경우

	->여러가지 원인과 해결방법이 있곘지만 나같은 경우에는 build.gradle을 리프레쉬후 스프링부트를 실행시켰을때 정상적으로 작동하였다.
	
	
3. build.gradle 파일에 implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' 와
   implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect' 해당 라이브러리를 추가 시켰는데도 뷰페이지에 레이아웃이 적용이 안되는 상황이 발생함.
       혹시아웃페이지가 문제가 있나 확인했는데 그건 아닌듯함. 
       
       내 추측상 
   layout:decorater="layout"
	
       이 부분에 문제가 있다 생각하고있음. 위 문장을 써서 적용이 되어야만 레이아웃이 적용이 될텐데 적용이 안되고 있음. 해결해야함
   
   -> 좀 찾아본 결과 thymeleaf 3.0버전부터는   decorater 대신 decorate로 바뀌었다함.
        결과적으로 layout:decorate="~{layout}" 이렇게 선언해줘야한다함. 
        하지만, 이방법을 사용했는데도 불구하고 레이아웃 적용이 되질 않았음.
        
    
          